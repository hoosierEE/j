LABTITLE=: 'Image Addon 3 Movie'
LABAUTHOR=: 0 : 0
Zach Reiter and Cliff Reiter
Cliff: Math Dept, Lafayette College
reiterc@lafayette.edu
June 2003
modified for J6.01, Sept 2006
)

NB. =========================================================
Lab Section Movie3 introduction
The movie3.ijs script included with the image3 addon allows for the reading and writing of simple quicktime movies. We find this useful for creating animations from sequences of image files and also for routinely including movies from a digital camera in html galleries. Some facilities for manipulating the movies are also included.
)

NB. =========================================================
Lab Section Load movie3.ijs
Here the script is loaded. If an error occurs, be sure that the path to the addon is correct and that the full addon has been installed.
)
dir_sep=: PATHSEP_j_             NB. directory separator
addon_path=: jpath '~addons/media/image3/'
load addon_path,'movie3.ijs'

NB. =========================================================
Lab Section Create a temp directory
We create a temporary directory as a subdirectory of the addon directory.
)
create_dir=:(1!:5 :: _1:)@boxopen
]mpath=:jpath '~temp',dir_sep,'movie3',dir_sep
create_dir mpath

NB. =========================================================
Lab Section Using mk_zoom
The first movie we will create is a simple zoom into a still digital image. The function mk_zoom accomplishes that. The left argument of mk_zoom is 6 numbers:
(1) A pair giving upper left position of the final frame in pixels.
(2) A pair giving the frame width and height
(3) The number of frames to use and the frame_rate
The right argument is a boxed list giving two file names: the name of the input image and the name of the output movie.
)
fi=:addon_path,'atkiln.jpg'  NB. image that comes with the addon
mo=:mpath,'zoom.mov'         NB. name for the movie
170 70 208 208 30 15 mk_zoom fi;mo

NB. =========================================================
Lab Section Viewing the zoom
Here you will see the movie if quicktime movies are supported by the browser recognized by J. If the was not successfully shown, you should go to the temporary directory (mpath) and run the movie that was created after checking that you have installed quicktime (tm) on your system. See
http://www.apple.com
and go to the quicktime downloads if you need to install quicktime.
)
load addon_path,'html_gallery8.ijs'  NB. contains "open_html"
open_html mo          NB. attempt to show movie via browser
mpath  NB. recall the temp directory
mo     NB. where the movie was created

NB. =========================================================
Lab Section Some image tools on movies
We can check the width and height of the movie, its length, and read the first frame. By default, read_mov reads frame 0 of track 0. The the default left argument is integrated with the function read_image. This is useful for creating thumbnails, for example.
)
mov_wh mo NB. the width and height
mov_l mo  NB. the length (number of frames)
$raw_read_mov mo  NB. raw read the first frame
$read_mov mo      NB. read the first frame
$read_image mo    NB. the same frame

NB. =========================================================
Lab Section Reading multiple frames
The left argument of read_mov may specify a list of track/frame pairs to be read. The result is a list of the images (hence a 4-dimensional array).
)
$(0,.i.4) read_mov mo  NB. read the first 4 frames

NB. =========================================================
Lab Section A frame-by-frame manipulation
We can manipulate the movie frame by frame using the on_frames adverb as illustrated below. If the movie is not automatically run, go to the temporary movie directory and view the flipped movie.
)
|. on_frames mo;mof=:mpath,'flip.mov'
open_html mof   NB. attempt to show movie via browser

NB. =========================================================
Lab Section Frame-by-frame lossless manipulation
Since jpeg images lose information each time they are read and rewritten, it is useful to be able to apply standard lossless operations that commonly arise. The operations supported are like those for individual images; however, these versions apply to simple jpeg sequence movies:
qtjpeg_flip_h        qtjpeg_flip_v
qtjpeg_ll_flip_h     qtjpeg_ll_flip_v
qtjpeg_ll_rot_180    qtjpeg_ll_rot_270
qtjpeg_ll_rot_90     qtjpeg_ll_transpose
qtjpeg_ll_transverse qtjpeg_rot_180
qtjpeg_rot_270       qtjpeg_rot_90
qtjpeg_transpose     qtjpeg_transverse
qtjpeg_xform
)

NB. =========================================================
Lab Section Frame-by-frame lossless manipulation: an example
Here we losslessly rotate the zoom movie. Go to the movie directory and view the rotated movie.
)
qtjpeg_rot_90 mo;mor=:mpath,'rot_zoom.mov' 
open_html mor   NB. attempt to show movie via browser

NB. =========================================================
Lab Section File sequences
We have already illustrated that we could represent several frames from a movie as a 4-dimensional array. However, for long movies, quite a large amount of memory is required. Hence, it is often more convenient to work with a file sequence corresponding to the frames of the movie and visa-versa. We will next create a sequence of files representing a view of the creation of the Mandelbrot set.
)

NB. =========================================================
Lab Section Mandelbrot set
Here the function sp creates complex sample points suitable for the Mandelbrot picture.
)
sp=:3 : '_2.25j_1.5+|.|:(3*(i.%<:)y) j./ (1*3)*(i.%<:)<.1*y'

sp 5  NB. sample pixels in real and imaginary parts

NB. =========================================================
Lab Section Mandelbrot set 2
Each pixel corresponds to an entry in the matrix and the Mandelbrot image displays how quickly the magnitude becomes large, under iteration of the function f on 0. In our images, we will use shades of gray to indicate the magnitude of points that have remained small. We will use bright hues to indicate where it has become large. The hue corresponds to the number of iterations it required to become large.
)
f=:(sp 5)&+@:*:
|f 0
|f f 0

NB. =========================================================
Lab Section Mandelbrot set 3
The function mset_lev creates a sequence of images corresponding to the iterations of f, colored as previously mentioned.
)
mset_lev=: 3 : 0
100 mset_lev y
:
f=.(sp x)&+@:*:
z=.f 0
K=.0
pal=.(Hue (3#0),5r6*3%:(i.%<:) 125),3#"0 <.255*%:(i.%<:)128
for_k. i. 128 do.
  ]m=.10<|z
  ]K=.K+(K=0)*m*k
  (pal;K+(K=0)*128+<.12.7999*|z)write_image y,(nfmt k),'.bmp'
  z=.f z*-.m
end.
$z
)

NB. =========================================================
Lab Section Mandelbrot set 4
Here we apply mset_lev to create a sequence of 128 Mandlebrot images. It takes about a minute on our system to create all the images.
)

360 mset_lev mpath,'mset_'

NB. =========================================================
Lab Section Mandelbrot set 5
Now we see that the temporary path has the indicated files.
)
]flist=:'mset_*.bmp' files_in mpath
$flist

NB. =========================================================
Lab Section Mandelbrot set movie
Here we create a png-sequence movie based on those files. This takes slightly longer than a minute on our system. Once it finishes, it will be shown by the browser, if possible; otherwise, go view the movie.
)
4 fseq_to_png_mov flist;mom=:mpath,'mset_.mov'
open_html mom   NB. attempt to show movie via browser

NB. =========================================================
Lab Section Finish
The movie script also provides a kind of inverse to the above: mov_to_fseq. See the documentation in the help directory for more details on the movie script facilities. Movies such as the ones we have created here may be routinely included in the html galleries built by the image3 addon. See the image3 html lab for examples.
)
